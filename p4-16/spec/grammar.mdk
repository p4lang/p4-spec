// BEGIN:p4program
p4program
    : /* empty */
    | p4program declaration
    | p4program ";"  /* empty declaration */
    ;
// END:p4program

// BEGIN:declaration
declaration
    : constantDeclaration
    | externDeclaration
    | actionDeclaration
    | parserDeclaration
    | typeDeclaration
    | controlDeclaration
    | instantiation
    | errorDeclaration
    | matchKindDeclaration
    | functionDeclaration
    ;
// END:declaration

// BEGIN:nonTypeName
nonTypeName
    : IDENTIFIER
    | APPLY
    | KEY
    | ACTIONS
    | STATE
    | ENTRIES
    | TYPE
    | PRIORITY
    ;
// END:nonTypeName

// BEGIN:name
name
    : nonTypeName
    | LIST
    | TYPE_IDENTIFIER
    ;
// END:name

// BEGIN:nonTableKwName
nonTableKwName
   : IDENTIFIER
   | TYPE_IDENTIFIER
   | APPLY
   | STATE
   | TYPE
   | PRIORITY
   ;
// END:nonTableKwName

// BEGIN:optCONST
optCONST
    : /* empty */
    | CONST
    ;
// END:optCONST

// BEGIN:optAnnotations
optAnnotations
    : /* empty */
    | annotations
    ;
// END:optAnnotations

// BEGIN:annotations
annotations
    : annotation
    | annotations annotation
    ;
// END:annotations

// BEGIN:annotation
annotation
    : "@" name
    | "@" name "(" annotationBody ")"
    | "@" name "[" structuredAnnotationBody "]"
    ;
// END:annotation

// BEGIN:annotationBody
annotationBody
    : /* empty */
    | annotationBody "(" annotationBody ")"
    | annotationBody annotationToken
    ;
// END:annotationBody

annotationToken
    : UNEXPECTED_TOKEN
    | ABSTRACT
    | ACTION
    | ACTIONS
    | APPLY
    | BOOL
    | BIT
    | CONST
    | CONTROL
    | DEFAULT
    | ELSE
    | ENTRIES
    | ENUM
    | ERROR
    | EXIT
    | EXTERN
    | FALSE
    | HEADER
    | HEADER_UNION
    | IF
    | IN
    | INOUT
    | INT
    | KEY
    | MATCH_KIND
    | TYPE
    | OUT
    | PARSER
    | PACKAGE
    | PRAGMA
    | RETURN
    | SELECT
    | STATE
    | STRING
    | STRUCT
    | SWITCH
    | TABLE
    | THIS
    | TRANSITION
    | TRUE
    | TUPLE
    | TYPEDEF
    | VARBIT
    | VALUESET
    | LIST
    | VOID
    | "_"
    | IDENTIFIER
    | TYPE_IDENTIFIER
    | STRING_LITERAL
    | INTEGER
    | "&&&"
    | ".."
    | "<<"
    | "&&"
    | "||"
    | "=="
    | "!="
    | ">="
    | "<="
    | "++"
    | "+"
    | "|+|"
    | "-"
    | "|-|"
    | "*"
    | "/"
    | "%"
    | "|"
    | "&"
    | "^"
    | "~"
    | "["
    | "]"
    | "{"
    | "}"
    | "<"
    | ">"
    | "!"
    | ":"
    | ","
    | "?"
    | "."
    | "="
    | ";"
    | "@"
    ;

// BEGIN:kvList
kvList
    : kvPair
    | kvList "," kvPair
    ;
// END:kvList

// BEGIN:kvPair
kvPair
    : name "=" expression
    ;
// END:kvPair

// BEGIN:parameterList
parameterList
    : /* empty */
    | nonEmptyParameterList
    ;
// END:parameterList

// BEGIN:nonEmptyParameterList
nonEmptyParameterList
    : parameter
    | nonEmptyParameterList "," parameter
    ;
// END:nonEmptyParameterList

// BEGIN:parameter
parameter
    : optAnnotations direction typeRef name
    | optAnnotations direction typeRef name "=" expression
    ;
// END:parameter

// BEGIN:direction
direction
    : IN
    | OUT
    | INOUT
    | /* empty */
    ;
// END:direction

// BEGIN:packageTypeDeclaration
packageTypeDeclaration
    : optAnnotations PACKAGE name optTypeParameters
      "(" parameterList ")"
    ;
// END:packageTypeDeclaration

instantiation
    : annotations typeRef "(" argumentList ")" name ";"
    | typeRef "(" argumentList ")" name ";"
    | annotations typeRef "(" argumentList ")" name "=" objInitializer ";"
    | typeRef "(" argumentList ")" name "=" objInitializer ";"
    ;

// BEGIN:objInitializer
objInitializer
    : "{" objDeclarations "}"
    ;
// END:objInitializer

// BEGIN:objDeclarations
objDeclarations
    : /* empty */
    | objDeclarations objDeclaration
    ;
// END:objDeclarations

// BEGIN:objDeclaration
objDeclaration
    : functionDeclaration
    | instantiation
    ;
// END:objDeclaration

// BEGIN:optConstructorParameters
optConstructorParameters
    : /* empty */
    | "(" parameterList ")"
    ;
// END:optConstructorParameters

dotPrefix
    : "."
    ;

/**************************** PARSER ******************************/

// BEGIN:parserDeclaration
parserDeclaration
    : parserTypeDeclaration optConstructorParameters
      "{" parserLocalElements parserStates "}"
    ;
// END:parserDeclaration

// BEGIN:parserLocalElements
parserLocalElements
    : /* empty */
    | parserLocalElements parserLocalElement
    ;
// END:parserLocalElements

// BEGIN:parserLocalElement
parserLocalElement
    : constantDeclaration
    | instantiation
    | variableDeclaration
    | valueSetDeclaration
    ;
// END:parserLocalElement

// BEGIN:parserTypeDeclaration
parserTypeDeclaration
    : optAnnotations PARSER name optTypeParameters
      "(" parameterList ")"
    ;
// END:parserTypeDeclaration

// BEGIN:parserStates
parserStates
    : parserState
    | parserStates parserState
    ;
// END:parserStates

// BEGIN:parserState
parserState
    : optAnnotations STATE name
      "{" parserStatements transitionStatement "}"
    ;
// END:parserState

// BEGIN:parserStatements
parserStatements
    : /* empty */
    | parserStatements parserStatement
    ;
// END:parserStatements

// BEGIN:parserStatement
parserStatement
    : assignmentOrMethodCallStatement
    | directApplication
    | emptyStatement
    | variableDeclaration
    | constantDeclaration
    | parserBlockStatement
    | conditionalStatement
    ;
// END:parserStatement

// BEGIN:parserBlockStatement
parserBlockStatement
    : optAnnotations "{" parserStatements "}"
    ;
// END:parserBlockStatement

// BEGIN:transitionStatement
transitionStatement
    : /* empty */
    | TRANSITION stateExpression
    ;
// END:transitionStatement

// BEGIN:stateExpression
stateExpression
    : name ";"
    | selectExpression
    ;
// END:stateExpression

// BEGIN:selectExpression
selectExpression
    : SELECT "(" expressionList ")" "{" selectCaseList "}"
    ;
// END:selectExpression

// BEGIN:selectCaseList
selectCaseList
    : /* empty */
    | selectCaseList selectCase
    ;
// END:selectCaseList

// BEGIN:selectCase
selectCase
    : keysetExpression ":" name ";"
    ;
// END:selectCase

// BEGIN:keysetExpression
keysetExpression
    : tupleKeysetExpression
    | simpleKeysetExpression
    ;
// END:keysetExpression

// BEGIN:tupleKeysetExpression
tupleKeysetExpression
    : "(" simpleKeysetExpression "," simpleExpressionList ")"
    | "(" reducedSimpleKeysetExpression ")"
    ;
// END:tupleKeysetExpression

// BEGIN:optTrailingComma
optTrailingComma
    : /* empty */
    | ","
    ;
// END:optTrailingComma

// BEGIN:simpleExpressionList
simpleExpressionList
    : simpleKeysetExpression
    | simpleExpressionList "," simpleKeysetExpression
    ;
// END:simpleExpressionList

// BEGIN:reducedSimpleKeysetExpression
reducedSimpleKeysetExpression
    : expression "&&&" expression
    | expression ".." expression
    | DEFAULT
    | "_"
    ;
// END:reducedSimpleKeysetExpression

// BEGIN:simpleKeysetExpression
simpleKeysetExpression
    : expression
    | expression "&&&" expression
    | expression ".." expression
    | DEFAULT
    | "_"
    ;
// END:simpleKeysetExpression

// BEGIN:valueSetDeclaration
valueSetDeclaration
  : optAnnotations
      VALUESET "<" baseType ">" "(" expression ")" name ";"
  | optAnnotations
      VALUESET "<" tupleType ">" "(" expression ")" name ";"
  | optAnnotations
      VALUESET "<" typeName ">" "(" expression ")" name ";"
  ;
// END:valueSetDeclaration

/*************************** CONTROL ************************/

// BEGIN:controlDeclaration
controlDeclaration
    : controlTypeDeclaration optConstructorParameters
      /* controlTypeDeclaration cannot contain type parameters */
      "{" controlLocalDeclarations APPLY controlBody "}"
    ;
// END:controlDeclaration

// BEGIN:controlTypeDeclaration
controlTypeDeclaration
    : optAnnotations CONTROL name optTypeParameters
      "(" parameterList ")"
    ;
// END:controlTypeDeclaration

// BEGIN:controlLocalDeclarations
controlLocalDeclarations
    : /* empty */
    | controlLocalDeclarations controlLocalDeclaration
    ;
// END:controlLocalDeclarations

// BEGIN:controlLocalDeclaration
controlLocalDeclaration
    : constantDeclaration
    | actionDeclaration
    | tableDeclaration
    | instantiation
    | variableDeclaration
    ;
// END:controlLocalDeclaration

// BEGIN:controlBody
controlBody
    : blockStatement
    ;
// END:controlBody

/*************************** EXTERN *************************/

// BEGIN:externDeclaration
externDeclaration
    : optAnnotations EXTERN nonTypeName optTypeParameters "{" methodPrototypes "}"
    | optAnnotations EXTERN functionPrototype ";"
    ;
// END:externDeclaration

// BEGIN:methodPrototypes
methodPrototypes
    : /* empty */
    | methodPrototypes methodPrototype
    ;
// END:methodPrototypes

// BEGIN:functionPrototype
functionPrototype
    : typeOrVoid name optTypeParameters "(" parameterList ")"
    ;
// END:functionPrototype

methodPrototype
    : optAnnotations functionPrototype ";"
    | optAnnotations TYPE_IDENTIFIER "(" parameterList ")" ";"
    ;

/************************** TYPES ****************************/

// BEGIN:typeRef
typeRef
    : baseType
    | typeName
    | specializedType
    | headerStackType
    | p4listType
    | tupleType
    ;
// END:typeRef

// BEGIN:namedType
namedType
    : typeName
    | specializedType
    ;
// END:namedType

// BEGIN:prefixedType
prefixedType
    : TYPE_IDENTIFIER
    | dotPrefix TYPE_IDENTIFIER
    ;
// END:prefixedType

// BEGIN:typeName
typeName
    : prefixedType
    ;
// END:typeName

// BEGIN:p4listType
p4listType
    : LIST "<" typeArg ">"
    ;
// END:p4listType

// BEGIN:tupleType
tupleType
    : TUPLE "<" typeArgumentList ">"
    ;
// END:tupleType

// BEGIN:headerStackType
headerStackType
    : typeName "[" expression "]"
    | specializedType "[" expression "]"
    ;
// END:headerStackType

// BEGIN:specializedType
specializedType
    : typeName "<" typeArgumentList ">"
    ;
// END:specializedType

// BEGIN:baseType
baseType
    : BOOL
    | MATCH_KIND
    | ERROR
    | BIT
    | STRING
    | INT
    | BIT "<" INTEGER ">"
    | INT "<" INTEGER ">"
    | VARBIT "<" INTEGER ">"
    | BIT "<" "(" expression ")" ">"
    | INT "<" "(" expression ")" ">"
    | VARBIT "<" "(" expression ")" ">"
    ;
// END:baseType

// BEGIN:typeOrVoid
typeOrVoid
    : typeRef
    | VOID
    | IDENTIFIER     // may be a type variable
    ;
// END:typeOrVoid

// BEGIN:optTypeParameters
optTypeParameters
    : /* empty */
    | typeParameters
    ;
// END:optTypeParameters

// BEGIN:typeParameters
typeParameters
    : "<" typeParameterList ">"
    ;
// END:typeParameters

// BEGIN:typeParameterList
typeParameterList
    : name
    | typeParameterList "," name
    ;
// END:typeParameterList

// BEGIN:typeArg
typeArg
    : typeRef
    | nonTypeName
    | VOID
    | "_"
    ;
// END:typeArg

// BEGIN:typeArgumentList
typeArgumentList
    : /* empty */
    | typeArg
    | typeArgumentList "," typeArg
    ;
// END:typeArgumentList

// BEGIN:realTypeArg
realTypeArg
    : typeRef
    | VOID
    | "_"
    ;
// END:realTypeArg

// BEGIN:realTypeArgumentList
realTypeArgumentList
    : realTypeArg
    | realTypeArgumentList "," typeArg
    ;
// END:realTypeArgumentList

// BEGIN:typeDeclaration
typeDeclaration
    : derivedTypeDeclaration
    | typedefDeclaration ";"
    | parserTypeDeclaration ";"
    | controlTypeDeclaration ";"
    | packageTypeDeclaration ";"
    ;
// END:typeDeclaration

// BEGIN:derivedTypeDeclaration
derivedTypeDeclaration
    : headerTypeDeclaration
    | headerUnionDeclaration
    | structTypeDeclaration
    | enumDeclaration
    ;
// END:derivedTypeDeclaration

// BEGIN:headerTypeDeclaration
headerTypeDeclaration
    : optAnnotations HEADER name optTypeParameters "{" structFieldList "}"
    ;
// END:headerTypeDeclaration

// BEGIN:structTypeDeclaration
structTypeDeclaration
    : optAnnotations STRUCT name optTypeParameters "{" structFieldList "}"
    ;
// END:structTypeDeclaration

// BEGIN:headerUnionDeclaration
headerUnionDeclaration
    : optAnnotations HEADER_UNION name optTypeParameters "{" structFieldList "}"
    ;
// END:headerUnionDeclaration

// BEGIN:structFieldList
structFieldList
    : /* empty */
    | structFieldList structField
    ;
// END:structFieldList

// BEGIN:structField
structField
    : optAnnotations typeRef name ";"
    ;
// END:structField

// BEGIN:enumDeclaration
enumDeclaration
    : optAnnotations ENUM name "{" identifierList optTrailingComma "}"
    | optAnnotations ENUM typeRef name "{"
      specifiedIdentifierList optTrailingComma "}"
    ;
// END:enumDeclaration

// BEGIN:specifiedIdentifierList
specifiedIdentifierList
    : specifiedIdentifier
    | specifiedIdentifierList "," specifiedIdentifier
    ;
// END:specifiedIdentifierList

// BEGIN:specifiedIdentifier
specifiedIdentifier
    : name "=" initializer
    ;
// END:specifiedIdentifier

// BEGIN:errorDeclaration
errorDeclaration
    : ERROR "{" identifierList "}"
    ;
// END:errorDeclaration

// BEGIN:matchKindDeclaration
matchKindDeclaration
    : MATCH_KIND "{" identifierList optTrailingComma "}"
    ;
// END:matchKindDeclaration

// BEGIN:identifierList
identifierList
    : name
    | identifierList "," name
    ;
// END:identifierList

typedefDeclaration
    : optAnnotations TYPEDEF typeRef name
    | optAnnotations TYPEDEF derivedTypeDeclaration name
    | optAnnotations TYPE typeRef name
    ;

/*************************** STATEMENTS *************************/

// BEGIN:assignmentOrMethodCallStatement
assignmentOrMethodCallStatement
    : lvalue "(" argumentList ")" ";"
    | lvalue "<" typeArgumentList ">" "(" argumentList ")" ";"
    | lvalue "="  expression ";"
    ;
// END:assignmentOrMethodCallStatement

// BEGIN:emptyStatement
emptyStatement
    : ";"
    ;
// END:emptyStatement

// BEGIN:exitStatement
exitStatement
    : EXIT ";"
    ;
// END:exitStatement

// BEGIN:returnStatement
returnStatement
    : RETURN ";"
    | RETURN expression ";"
    ;
// END:returnStatement

// BEGIN:conditionalStatement
conditionalStatement
    : IF "(" expression ")" statement
    | IF "(" expression ")" statement ELSE statement
    ;
// END:conditionalStatement

// To support direct invocation of a control or parser without instantiation
// BEGIN:directApplication
directApplication
    : typeName "." APPLY "(" argumentList ")" ";"
    | specializedType "." APPLY "(" argumentList ")" ";"
    ;
// END:directApplication

statement
    : assignmentOrMethodCallStatement
    | directApplication
    | conditionalStatement
    | emptyStatement
    | blockStatement
    | returnStatement
    | exitStatement
    | switchStatement
    ;

// BEGIN:blockStatement
blockStatement
    : optAnnotations "{" statOrDeclList "}"
    ;
// END:blockStatement

// BEGIN:statOrDeclList
statOrDeclList
    : /* empty */
    | statOrDeclList statementOrDeclaration
    ;
// END:statOrDeclList

// BEGIN:switchStatement
switchStatement
    : SWITCH "(" expression ")" "{" switchCases "}"
    ;
// END:switchStatement

// BEGIN:switchCases
switchCases
    : /* empty */
    | switchCases switchCase
    ;
// END:switchCases

// BEGIN:switchCase
switchCase
    : switchLabel ":" blockStatement
    | switchLabel ":"  // fall-through
    ;
// END:switchCase

// BEGIN:switchLabel
switchLabel
    : DEFAULT
    | nonBraceExpression
    ;
// END:switchLabel

// BEGIN:statementOrDeclaration
statementOrDeclaration
    : variableDeclaration
    | constantDeclaration
    | statement
    ;
// END:statementOrDeclaration

/************************* TABLE *********************************/

// BEGIN:tableDeclaration
tableDeclaration
    : optAnnotations TABLE name "{" tablePropertyList "}"
    ;
// END:tableDeclaration

// BEGIN:tablePropertyList
tablePropertyList
    : tableProperty
    | tablePropertyList tableProperty
    ;
// END:tablePropertyList

tableProperty
    : KEY "=" "{" keyElementList "}"
    | ACTIONS "=" "{" actionList "}"
    | optAnnotations optCONST ENTRIES "=" "{" entriesList "}"
    | optAnnotations optCONST nonTableKwName "=" initializer ";"
    ;

// BEGIN:keyElementList
keyElementList
    : /* empty */
    | keyElementList keyElement
    ;
// END:keyElementList

// BEGIN:keyElement
keyElement
    : expression ":" name optAnnotations ";"
    ;
// END:keyElement

// BEGIN:actionList
actionList
    : /* empty */
    | actionList optAnnotations actionRef ";"
    ;
// END:actionList

// BEGIN:actionRef
actionRef
    : prefixedNonTypeName
    | prefixedNonTypeName "(" argumentList ")"
    ;
// END:actionRef

// BEGIN:entry
entry
    : optCONST entryPriority keysetExpression ':' actionRef optAnnotations ';'
    | optCONST keysetExpression ':' actionRef optAnnotations ';'
    ;
// END:entry

// BEGIN:entryPriority
entryPriority
 : PRIORITY '=' INTEGER ":"
 | PRIORITY '=' '(' expression ')' ":"
 ;
// END:entryPriority

// BEGIN:entriesList
entriesList
    : /* empty */
    | entriesList entry
    ;
// END:entriesList

/************************* ACTION ********************************/

// BEGIN:actionDeclaration
actionDeclaration
    : optAnnotations ACTION name "(" parameterList ")" blockStatement
    ;
// END:actionDeclaration

/************************* VARIABLES *****************************/

// BEGIN:variableDeclaration
variableDeclaration
    : annotations typeRef name optInitializer ";"
    | typeRef name optInitializer ";"
    ;
// END:variableDeclaration

// BEGIN:constantDeclaration
constantDeclaration
    : optAnnotations CONST typeRef name "=" initializer ";"
    ;
// END:constantDeclaration

// BEGIN:optInitializer
optInitializer
    : /* empty */
    | "=" initializer
    ;
// END:optInitializer

// BEGIN:initializer
initializer
    : expression
    ;
// END:initializer

/**************** Expressions ****************/

// BEGIN:functionDeclaration
functionDeclaration
    : annotations functionPrototype blockStatement
    | functionPrototype blockStatement
    ;
// END:functionDeclaration

// BEGIN:argumentList
argumentList
    : /* empty */
    | nonEmptyArgList
    ;
// END:argumentList

// BEGIN:nonEmptyArgList
nonEmptyArgList
    : argument
    | nonEmptyArgList "," argument
    ;
// END:nonEmptyArgList

// BEGIN:argument
argument
    : expression  /* positional argument */
    | name "=" expression  /* named argument */
    | "_"
    | name "=" "_"
    ;
// END:argument

// BEGIN:expressionList
expressionList
    : /* empty */
    | expression
    | expressionList "," expression
    ;
// END:expressionList

// BEGIN:structuredAnnotationBody
structuredAnnotationBody
    : expressionList optTrailingComma
    | kvList optTrailingComma
    ;
// END:structuredAnnotationBody

// BEGIN:member
member
    : name
    ;
// END:member

// BEGIN:prefixedNonTypeName
prefixedNonTypeName
    : nonTypeName
    | dotPrefix nonTypeName
    ;
// END:prefixedNonTypeName

// BEGIN:lvalue
lvalue
    : prefixedNonTypeName
    | THIS
    | lvalue "." member
    | lvalue "[" expression "]"
    | lvalue "[" expression ":" expression "]"
    ;
// END:lvalue

%left ","
%nonassoc "?"
%nonassoc ":"
%left "||"
%left "&&"
%left "==" "!="
%left "<" ">" "<=" ">="
%left "|"
%left "^"
%left "&"
%left "<<" ">>"
%left "++" "+" "-" "|+|" "|-|"
%left "*" "/" "%"
%right PREFIX
%nonassoc "]" "(" "["
%left "."

// Additional precedences need to be specified

expression
    : INTEGER
    | DOTS
    | STRING_LITERAL
    | TRUE
    | FALSE
    | THIS
    | prefixedNonTypeName
    | expression "[" expression "]"
    | expression "[" expression ":" expression "]"
    | "{" expressionList optTrailingComma "}"
    | "{#}"
    | "{" kvList optTrailingComma "}"
    | "{" kvList "," DOTS optTrailingComma "}"
    | "(" expression ")"
    | "!" expression %prec PREFIX
    | "~" expression %prec PREFIX
    | "-" expression %prec PREFIX
    | "+" expression %prec PREFIX
    | typeName "." member
    | ERROR "." member
    | expression "." member
    | expression "*" expression
    | expression "/" expression
    | expression "%" expression
    | expression "+" expression
    | expression "-" expression
    | expression "|+|" expression
    | expression "|-|" expression
    | expression "<<" expression
    | expression ">>" expression
    | expression "<=" expression
    | expression ">=" expression
    | expression "<" expression
    | expression ">" expression
    | expression "!=" expression
    | expression "==" expression
    | expression "&" expression
    | expression "^" expression
    | expression "|" expression
    | expression "++" expression
    | expression "&&" expression
    | expression "||" expression
    | expression "?" expression ":" expression
    | expression "<" realTypeArgumentList ">" "(" argumentList ")"
    | expression "(" argumentList ")"
    | namedType "(" argumentList ")"
    | "(" typeRef ")" expression
    ;

// BEGIN:nonBraceExpression
nonBraceExpression
    : INTEGER
    | STRING_LITERAL
    | TRUE
    | FALSE
    | THIS
    | prefixedNonTypeName
    | nonBraceExpression "[" expression "]"
    | nonBraceExpression "[" expression ":" expression "]"
    | "(" expression ")"
    | "!" expression %prec PREFIX
    | "~" expression %prec PREFIX
    | "-" expression %prec PREFIX
    | "+" expression %prec PREFIX
    | typeName "." member
    | ERROR "." member
    | nonBraceExpression "." member
    | nonBraceExpression "*" expression
    | nonBraceExpression "/" expression
    | nonBraceExpression "%" expression
    | nonBraceExpression "+" expression
    | nonBraceExpression "-" expression
    | nonBraceExpression "|+|" expression
    | nonBraceExpression "|-|" expression
    | nonBraceExpression "<<" expression
    | nonBraceExpression ">>" expression
    | nonBraceExpression "<=" expression
    | nonBraceExpression ">=" expression
    | nonBraceExpression "<" expression
    | nonBraceExpression ">" expression
    | nonBraceExpression "!=" expression
    | nonBraceExpression "==" expression
    | nonBraceExpression "&" expression
    | nonBraceExpression "^" expression
    | nonBraceExpression "|" expression
    | nonBraceExpression "++" expression
    | nonBraceExpression "&&" expression
    | nonBraceExpression "||" expression
    | nonBraceExpression "?" expression ":" expression
    | nonBraceExpression "<" realTypeArgumentList ">" "(" argumentList ")"
    | nonBraceExpression "(" argumentList ")"
    | namedType "(" argumentList ")"
    | "(" typeRef ")" expression
    ;
// END:nonBraceExpression
